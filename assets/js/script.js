//telling JSHint which version of JavaScript to check against
/* jshint esversion: 11 */

//function to only load in JS content once the webpage is fully loaded
//as learned in the Love Maths project
document.addEventListener("DOMContentLoaded", function(){
    document.getElementById("pull-1-button").addEventListener('click', rollOnce);
    document.getElementById("pull-10-button").addEventListener('click', rollTen);
    document.getElementById("reset-button").addEventListener('click', resetGame);
    document.getElementById("start-button").addEventListener('click', startGame);
});

//function executed when the Roll x1 button is clicked.
/**
 * The function will call the caclulateLuck() function.
 * Decrement the counters for rare and ultra rare guarantees.
 * Check if the user has rols remaining and return a popup/disable buttons if they do not.
 * Check for guarantees and return relevant rewards based on rarity received by calculateLuck().
 * Decrement the overall counter for rolls remaining.
 */
function rollOnce() {
    //calculating the rarity of the result
    let result = calculateLuck();

    //decrementing both rare and ultra guarantee counters
    decrementHistory('rare');
    decrementHistory('ultra');

    //checking if user has rolls remaining
    if(checkHistory('full') <= 0){
        noRollsRemaining();
    }//checking the users ultra guarantee count or if the result was an ultra rare
    else if(checkHistory('ultra') == 0 || result == "Ultra Rare"){
        //calling function to display relevant reward for ultra rolls
        displayResults('ultra');
        //reset ultra history for logic
        resetGuarantee('ultra', 100);
        //catch to prevent any issues if an Ultra rare happens to roll at the same time
        //that a rare should roll, guaranteeing the rare on the next roll
        if(checkHistory('rare') == 0){
            resetGuarantee('rare', 1);
        }
    }//checking the users rare guarantee count or if the result was a rare
    else if(checkHistory('rare') == 0 || result == "Rare"){
        //calling function to display relevant reward for rare rolls
        displayResults('rare');
        //reset rare history for logic
        resetGuarantee('rare', 10);
    }else if(result == "Normal"){
        //calling function to display relevant reward for normal rolls
        displayResults('normal');
    }else{
        alert(`error, unknown result: ${result}`);
    }
    //decrementing the overall rolls remaining
    decrementHistory('full');
}

//function that calls the rollOnce() function 10 times
/**
 * This function calls the rollOnce() function 10 times.
 * It also performs checks based on number of rolls remaining
 * If the user has less than ten it will display a popup informing them.
 * And will also disable the x10 button.
 */
function rollTen() {
    //checking if the user has any rolls remaining
    if(checkHistory('full') <= 0){
        noRollsRemaining();
    }//checking if the user has less than 10 rolls remaining 
    else if(checkHistory('full') < 10){
        //disabling x10 button if 10 rolls are no longer possible
        document.getElementById("pull-10-button").disabled = true;
        
        //using dialog boxes to create modals instead of alerts, found here https://blog.webdevsimplified.com/2023-04/html-dialog/
        let popup = document.getElementById("popup");
        popup.showModal();
        popup.innerHTML = `<form method="dialog">
            <h2>Less than 10 rolls remaining!</h2>
            <p>Please roll x1!</p>
            <br>
            <button type="submit" id="popup-button">Okay</button>
            <br>
        </form>`;
    } else{
        for(let i = 0; i < 10; i++){
            rollOnce();
        }
    }
}

//function to hold the "luck" of each roll
/**
 * This function simply generates a random number
 * between 1 and 200 and assigns a rarity to the
 * reward based upon the number.
 * It will then return that rarity as a string for
 * other functions to use.
 */
function calculateLuck() {
    //random number between 1 and 200
    let odds = Math.floor(Math.random() * 200) + 1;
    let result;

    //Roughly 1% odds for ultra rare, 10% for rare
    if(odds <=175){
        result = "Normal";
    } else if(odds >= 176 && odds <= 198){
        result = "Rare";
    } else if(odds > 198){
        result = "Ultra Rare";
    } else{
        throw "Error: Unexpected result ${result}`";
    }

    return result;
}

//function to push results and add them to the history section
/**
 * This function takes in the string generated by calculateLuck() and
 * provided by the rollOnce() functions. It will then create a corresponding
 * div of the correct rarity and add it to the result area div as a child.
 */
function displayResults(rollResult) {
    //create a new div to hold and assign the correct result
    let resultDiv = document.createElement("div");
    resultDiv.setAttribute("class", `${rollResult}-result`);

    //adding an id to allow use of style/background to use the addResultPic function
    resultDiv.setAttribute("id", `${rollResult}`);
    //adding an image to the resulting div
    resultDiv.style.background = addResultPic(rollResult);

    //add the div to the results area
    document.getElementById("result-area").appendChild(resultDiv);
}

//A function to add a random image to various rarities of results
/**
 * This function contains an empty array. Depending on the rarity supplied to it
 * by the displayResults() function the array will populate with various images to
 * correspond to that rarity.
 * The array will then be randomly run through to select an image which is returned
 * so that the displayResults() function can add it to the created result.
 */
function addResultPic(rollResult){
    //array containing various images for the roll rewards
    //concept found here https://stackoverflow.com/questions/64993980/adding-a-random-background-image-in-css-using-javascript
    let possibleRolls = [];

    //populating the array with "normal" roll result images
    if(rollResult == "normal"){
        possibleRolls = [`url("assets/images/roll-results/${rollResult}/${rollResult}-ring-1.webp") center center/cover`,
            `url("assets/images/roll-results/${rollResult}/${rollResult}-ring-2.webp") center center/cover`,
            `url("assets/images/roll-results/${rollResult}/${rollResult}-ring-3.webp") center center/cover`,
            `url("assets/images/roll-results/${rollResult}/${rollResult}-ring-4.webp") center center/cover`,
            `url("assets/images/roll-results/${rollResult}/${rollResult}-ring-5.webp") center center/cover`,
            `url("assets/images/roll-results/${rollResult}/${rollResult}-ring-6.webp") center center/cover`,
            `url("assets/images/roll-results/${rollResult}/${rollResult}-ring-7.webp") center center/cover`,
            `url("assets/images/roll-results/${rollResult}/${rollResult}-ring-8.webp") center center/cover`,
            `url("assets/images/roll-results/${rollResult}/${rollResult}-sword-1.webp") center center/cover`,
            `url("assets/images/roll-results/${rollResult}/${rollResult}-sword-2.webp") center center/cover`,
            `url("assets/images/roll-results/${rollResult}/${rollResult}-sword-3.webp") center center/cover`,
            `url("assets/images/roll-results/${rollResult}/${rollResult}-sword-4.webp") center center/cover`,
            `url("assets/images/roll-results/${rollResult}/${rollResult}-sword-5.webp") center center/cover`,
            `url("assets/images/roll-results/${rollResult}/${rollResult}-sword-6.webp") center center/cover`,
            `url("assets/images/roll-results/${rollResult}/${rollResult}-sword-7.webp") center center/cover`,
            `url("assets/images/roll-results/${rollResult}/${rollResult}-sword-8.webp") center center/cover`,
            `url("assets/images/roll-results/${rollResult}/${rollResult}-sword-9.webp") center center/cover`,
            `url("assets/images/roll-results/${rollResult}/${rollResult}-sword-10.webp") center center/cover`,
            `url("assets/images/roll-results/${rollResult}/${rollResult}-sword-11.webp") center center/cover`,
            `url("assets/images/roll-results/${rollResult}/${rollResult}-sword-12.webp") center center/cover`,
            `url("assets/images/roll-results/${rollResult}/${rollResult}-sword-13.webp") center center/cover`,
            `url("assets/images/roll-results/${rollResult}/${rollResult}-sword-14.webp") center center/cover`,
        ];
    }//populating the array with "rare" roll result images
    else if(rollResult == "rare"){
        possibleRolls = [`url("assets/images/roll-results/${rollResult}/${rollResult}-ring-1.webp") center center/cover`,
        `url("assets/images/roll-results/${rollResult}/${rollResult}-ring-2.webp") center center/cover`,
        `url("assets/images/roll-results/${rollResult}/${rollResult}-ring-3.webp") center center/cover`,
        `url("assets/images/roll-results/${rollResult}/${rollResult}-ring-4.webp") center center/cover`,
        `url("assets/images/roll-results/${rollResult}/${rollResult}-ring-5.webp") center center/cover`,
        `url("assets/images/roll-results/${rollResult}/${rollResult}-ring-6.webp") center center/cover`,
        `url("assets/images/roll-results/${rollResult}/${rollResult}-sword-1.webp") center center/cover`,
        `url("assets/images/roll-results/${rollResult}/${rollResult}-sword-2.webp") center center/cover`,
        `url("assets/images/roll-results/${rollResult}/${rollResult}-sword-3.webp") center center/cover`,
        `url("assets/images/roll-results/${rollResult}/${rollResult}-sword-4.webp") center center/cover`,
        `url("assets/images/roll-results/${rollResult}/${rollResult}-sword-5.webp") center center/cover`,
        `url("assets/images/roll-results/${rollResult}/${rollResult}-sword-6.webp") center center/cover`,
        `url("assets/images/roll-results/${rollResult}/${rollResult}-sword-7.webp") center center/cover`,
        `url("assets/images/roll-results/${rollResult}/${rollResult}-sword-8.webp") center center/cover`,
        `url("assets/images/roll-results/${rollResult}/${rollResult}-sword-9.webp") center center/cover`,
        ];
    }//populating the array with "ultra" roll result images
    else if(rollResult == "ultra"){
        possibleRolls = [`url("assets/images/roll-results/${rollResult}/${rollResult}-ring-1.webp") center center/cover`,
        `url("assets/images/roll-results/${rollResult}/${rollResult}-ring-2.webp") center center/cover`,
        `url("assets/images/roll-results/${rollResult}/${rollResult}-ring-3.webp") center center/cover`,
        `url("assets/images/roll-results/${rollResult}/${rollResult}-sword-1.webp") center center/cover`,
        `url("assets/images/roll-results/${rollResult}/${rollResult}-sword-2.webp") center center/cover`,
        `url("assets/images/roll-results/${rollResult}/${rollResult}-sword-3.webp") center center/cover`,
        ];
    }//catch in the event of a roll error
    else{
        throw(`Error: Invalid roll result ${rollResult}`);
    }

    //picking a random image
    let result = Math.floor(Math.random() * possibleRolls.length);
    //returning that random image
    return possibleRolls[result];
}

//function to reset rare or ultra guarantee amounts after rolling one
function resetGuarantee(historyType, amount){
    document.getElementById(`${historyType}History`).innerText = amount;
}

//function to set all remaining rolls to 0 once 100 have been used
/**
 * This function will execute if the user tries to roll after 100 rolls have been used.
 * It will prompt a dialog modal informing them they have used 100 and now need to reset.
 * Additionally it will disable both roll buttons to prevent further attempts.
 */
function noRollsRemaining(){
    //using dialog boxes to create modals instead of alerts, found here https://blog.webdevsimplified.com/2023-04/html-dialog/
    let popup = document.getElementById("popup");
    popup.showModal();
    popup.innerHTML = `<form method="dialog">
        <h2>You've used all your rolls!</h2>
        <p>Please reset and try again!</p>
        <br>
        <button type="submit" id="popup-button">Okay</button>
        <br>
    </form>`;
    
    //setting all counters to 0
    document.getElementById("fullHistory").innerText = 0;
    document.getElementById("rareHistory").innerText = 0;
    document.getElementById("ultraHistory").innerText = 0;

    //disabling both roll buttons
    document.getElementById("pull-1-button").disabled = true;
    document.getElementById("pull-10-button").disabled = true;
}

//function to hide the intro div and display the two divs for the game area
function startGame() {
    document.getElementById("intro-area").style.display = "none";
    document.getElementById("button-area").style.display = "block";
    document.getElementById("history-area").style.display = "block";
}

//function to clear and reset all history and enable roll buttons
function resetGame() {
    //clearing result area
    document.getElementById("result-area").innerHTML = "";

    //resetting all counters to default
    document.getElementById("fullHistory").innerText = 100;
    document.getElementById("rareHistory").innerText = 10;
    document.getElementById("ultraHistory").innerText = 100;

    //re-enabling roll buttons on reset
    document.getElementById("pull-1-button").disabled = false;
    document.getElementById("pull-10-button").disabled = false;
}

//function to check how many rolls a user has made
/**
 * This function is used to check the three history types:
 * Full, Rare, and Ultra.
 * This is used to check for the guarantees for Rare and Ultra rewards
 * as well as being used to track how many rolls a user has made
 * in order to end the game once they have made 100.
 */
function checkHistory(historyType) {
    let history = parseInt(document.getElementById(`${historyType}History`).innerText);
    return history;
}

//function to decrement history counter
/**
 * This function is used to decrement the three history types:
 * Full, Rare, and Ultra.
 * This is used to guarantee the correct rewards when Rare and Ultra reach 0
 * as well as counting down the overall rolls a user has made.
 */
function decrementHistory(historyType) {
    let history = parseInt(document.getElementById(`${historyType}History`).innerText);
    document.getElementById(`${historyType}History`).innerText = history > 0 ? --history : 0;
}